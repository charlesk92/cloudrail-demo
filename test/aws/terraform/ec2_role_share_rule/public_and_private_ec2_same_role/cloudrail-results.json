[
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will iterate over all EC2 resources that use IAM roles. It will classify them between \"public\" (those that are accessible from the Internet) and \"private\" (those that are not). If an IAM role is determined to be associated with at least one public instance and at least one private instance, it will be considered in violation.",
        "rule_name": "EC2(s) within the public and private subnets should not share identical IAM roles",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Having the same IAM role for both public and private instances may be dangerous. Someone may expand the permissions for the role in order to use it in a private workload, not realizing a public workload has the same privileges.",
        "issue_items": [
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "c35aebe0-8240-47ac-b315-0eacf1e15369"
                },
                "evidence": "~Instance ```['aws_instance.pub_ins']```~. Instance is publically exposed. Instance uses IAM role ```aws_iam_role.test_role```. Private EC2 instance shares IAM role ```aws_iam_role.test_role``` as well. ~Instance ```aws_instance.priv_ins.id```~",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_iam_role.test_role",
                    "cloud_arn": null,
                    "name": null,
                    "tf_resource_metadata": {
                        "address": "aws_iam_role.test_role",
                        "start_line": 51,
                        "block_text": "resource \"aws_iam_role\" \"test_role\" {\n  name = \"test_role\"\n\n  assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n\n}\n",
                        "module_metadata": null,
                        "id": "4199c0de-746a-4eb1-a9b6-5b506e180809",
                        "end_line": 70,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_iam_role.test_role.id",
                    "type": "Role",
                    "id": "596536ea-47ae-4e66-925d-39e941118cf5"
                }
            }
        ],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "e1861213-c290-4aa9-beca-11dce1f1e35a",
        "rule_id": "ec2_role_share_rule",
        "status": "failed"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will look at all of your Transit Gateways. For each one, it will determine which VPCs are in use. It will iterate over all VPCs in pairs and compare their CIDR blocks. If there's an intersection in the CIDR blocks (one contains an IP that is contained in the other) a violation will be flagged.",
        "rule_name": "VPC's in Transit Gateway should not have common CIDR's",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "It is important that VPCs utilizing a Transit Gateway should not have overlapping CIDR. This becomes problematic overtime as the VPCs will likely experience routing issues.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b64e7fca-3fa8-4cfa-a77c-0331303d0823",
        "rule_id": "vpcs_in_transit_gateway_no_overlapping_cidr_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the default security groups configured in your environment. It will then cross reference these security groups with the resources they are used with, to determine they are used at all. For each of those default security groups that are used, Cloudrail will determine if they allow any ingress or egress traffic. By doing this context-based analysis, Cloudrail ensures that only default security groups who pose a true security risk are highlighted.",
        "rule_name": "Ensure all used default security groups of every VPC restrict all traffic",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Using default security groups in general is inadvisable. By locking security groups down, you are validating that if anyone uses them by accident, they will realize before any security issues occur.",
        "issue_items": [
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "998b495d-2252-43ad-a37e-52c1b2d24733"
                },
                "evidence": "~VPC ```module.vpc.aws_vpc.this[0]```~. ```eni-pseudo-f71c9d97-35d0-4905-8c17-78a28f0adb7a``` uses ENI ```aws_instance.priv_ins```. The ENI is secured by default Security Group ```module.vpc.aws_default_security_group.this[0]``` and allow all traffic",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "module.vpc.aws_default_security_group.this[0]",
                    "cloud_arn": null,
                    "name": "default",
                    "tf_resource_metadata": {
                        "address": "module.vpc.aws_default_security_group.this",
                        "start_line": 57,
                        "block_text": "resource \"aws_default_security_group\" \"this\" {\n  count = var.create_vpc && var.manage_default_security_group ? 1 : 0\n\n  vpc_id = aws_vpc.this[0].id\n\n  dynamic \"ingress\" {\n    for_each = var.default_security_group_ingress\n    content {\n      self             = lookup(ingress.value, \"self\", null)\n      cidr_blocks      = compact(split(\",\", lookup(ingress.value, \"cidr_blocks\", \"\")))\n      ipv6_cidr_blocks = compact(split(\",\", lookup(ingress.value, \"ipv6_cidr_blocks\", \"\")))\n      prefix_list_ids  = compact(split(\",\", lookup(ingress.value, \"prefix_list_ids\", \"\")))\n      description      = lookup(ingress.value, \"description\", null)\n      from_port        = lookup(ingress.value, \"from_port\", 0)\n      to_port          = lookup(ingress.value, \"to_port\", 0)\n      protocol         = lookup(ingress.value, \"protocol\", \"-1\")\n    }\n  }\n\n  dynamic \"egress\" {\n    for_each = var.default_security_group_egress\n    content {\n      self             = lookup(egress.value, \"self\", null)\n      cidr_blocks      = compact(split(\",\", lookup(egress.value, \"cidr_blocks\", \"\")))\n      ipv6_cidr_blocks = compact(split(\",\", lookup(egress.value, \"ipv6_cidr_blocks\", \"\")))\n      prefix_list_ids  = compact(split(\",\", lookup(egress.value, \"prefix_list_ids\", \"\")))\n      description      = lookup(egress.value, \"description\", null)\n      from_port        = lookup(egress.value, \"from_port\", 0)\n      to_port          = lookup(egress.value, \"to_port\", 0)\n      protocol         = lookup(egress.value, \"protocol\", \"-1\")\n    }\n  }\n\n  tags = merge(\n    {\n      \"Name\" = format(\"%s\", var.default_security_group_name)\n    },\n    var.tags,\n    var.default_security_group_tags,\n  )\n}\n",
                        "module_metadata": {
                            "address": "module.vpc",
                            "file_name": "main.tf",
                            "start_line": 10,
                            "end_line": 33,
                            "block_text": "module \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.48.0\"\n\n  name = \"Ec2RoleShareRule1\"\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = true\n\n  cidr = \"10.0.0.0/16\"\n  manage_default_security_group= true\n  default_security_group_ingress = [\n          {\n      from_port   = 22\n      to_port     = 22\n      protocol    = \"tcp\"\n      description = \"ssh\"\n      cidr_blocks = \"0.0.0.0/0\"\n    }]\n  default_security_group_egress =[]\n}\n",
                            "module_metadata": null,
                            "id": "b30dde9c-0dc8-4cda-8a61-0258eb13a36d"
                        },
                        "id": "bdb85c70-7dd5-4a18-8ab3-b4ffdb49ce0f",
                        "end_line": 97,
                        "file_name": ".terraform/modules/vpc/main.tf"
                    },
                    "cloud_id": "module.vpc.aws_default_security_group.this[0].id",
                    "type": "Security Group",
                    "id": "7d0cbd1a-c4d0-4cf3-a813-1fda65e1f1e7"
                }
            }
        ],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b264b1da-cb64-47a0-92ac-4db93360db0d",
        "rule_id": "ensure_all_used_default_security_groups_restrict_all_traffic_rule",
        "status": "failed"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 22 (SSH) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 22 (SSH)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 22 (SSH).",
        "issue_items": [
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.pub_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.pub_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.pub_ins",
                        "start_line": 99,
                        "block_text": "resource \"aws_instance\" \"pub_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.public_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n\n}\n",
                        "module_metadata": null,
                        "id": "aeac3c10-04ec-4f5b-ae2a-e2b9ca1a8aac",
                        "end_line": 105,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.pub_ins.id",
                    "type": "Ec2 Instance",
                    "id": "95e6e9e0-acc6-497e-8a64-c626f7cc960b"
                },
                "evidence": "~Internet~. Subnet ```module.vpc.aws_subnet.public[0]``` has Internet Gateway. Instance ```aws_instance.pub_ins``` is on ```module.vpc.aws_subnet.public[0]```. Subnet routes traffic from instance to Internet Gateway. Subnet uses NACL ```nacl-pseudo-b6c2a98d-0cd4-400d-b994-829796b18d69``` which allows port ```22```. Instance uses Security Group ```['module.vpc.aws_default_security_group.this[0]']```. Security Group allows port ```22```. ~Instance~",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "module.vpc.aws_default_security_group.this[0]",
                    "cloud_arn": null,
                    "name": "default",
                    "tf_resource_metadata": {
                        "address": "module.vpc.aws_default_security_group.this",
                        "start_line": 57,
                        "block_text": "resource \"aws_default_security_group\" \"this\" {\n  count = var.create_vpc && var.manage_default_security_group ? 1 : 0\n\n  vpc_id = aws_vpc.this[0].id\n\n  dynamic \"ingress\" {\n    for_each = var.default_security_group_ingress\n    content {\n      self             = lookup(ingress.value, \"self\", null)\n      cidr_blocks      = compact(split(\",\", lookup(ingress.value, \"cidr_blocks\", \"\")))\n      ipv6_cidr_blocks = compact(split(\",\", lookup(ingress.value, \"ipv6_cidr_blocks\", \"\")))\n      prefix_list_ids  = compact(split(\",\", lookup(ingress.value, \"prefix_list_ids\", \"\")))\n      description      = lookup(ingress.value, \"description\", null)\n      from_port        = lookup(ingress.value, \"from_port\", 0)\n      to_port          = lookup(ingress.value, \"to_port\", 0)\n      protocol         = lookup(ingress.value, \"protocol\", \"-1\")\n    }\n  }\n\n  dynamic \"egress\" {\n    for_each = var.default_security_group_egress\n    content {\n      self             = lookup(egress.value, \"self\", null)\n      cidr_blocks      = compact(split(\",\", lookup(egress.value, \"cidr_blocks\", \"\")))\n      ipv6_cidr_blocks = compact(split(\",\", lookup(egress.value, \"ipv6_cidr_blocks\", \"\")))\n      prefix_list_ids  = compact(split(\",\", lookup(egress.value, \"prefix_list_ids\", \"\")))\n      description      = lookup(egress.value, \"description\", null)\n      from_port        = lookup(egress.value, \"from_port\", 0)\n      to_port          = lookup(egress.value, \"to_port\", 0)\n      protocol         = lookup(egress.value, \"protocol\", \"-1\")\n    }\n  }\n\n  tags = merge(\n    {\n      \"Name\" = format(\"%s\", var.default_security_group_name)\n    },\n    var.tags,\n    var.default_security_group_tags,\n  )\n}\n",
                        "module_metadata": {
                            "address": "module.vpc",
                            "file_name": "main.tf",
                            "start_line": 10,
                            "end_line": 33,
                            "block_text": "module \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"2.48.0\"\n\n  name = \"Ec2RoleShareRule1\"\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = true\n\n  cidr = \"10.0.0.0/16\"\n  manage_default_security_group= true\n  default_security_group_ingress = [\n          {\n      from_port   = 22\n      to_port     = 22\n      protocol    = \"tcp\"\n      description = \"ssh\"\n      cidr_blocks = \"0.0.0.0/0\"\n    }]\n  default_security_group_egress =[]\n}\n",
                            "module_metadata": null,
                            "id": "b30dde9c-0dc8-4cda-8a61-0258eb13a36d"
                        },
                        "id": "bdb85c70-7dd5-4a18-8ab3-b4ffdb49ce0f",
                        "end_line": 97,
                        "file_name": ".terraform/modules/vpc/main.tf"
                    },
                    "cloud_id": "module.vpc.aws_default_security_group.this[0].id",
                    "type": "Security Group",
                    "id": "1b00e0a7-2f8b-45cc-af06-249127732df3"
                }
            }
        ],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b6b91e76-14e7-4a88-86c5-1f46554084d1",
        "rule_id": "public_access_security_groups_ssh_port_rule",
        "status": "failed"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 3389 (RDP) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 3389 (RDP)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 3389 (RDP).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "5fdc166b-df2e-411f-8e15-00773af12bff",
        "rule_id": "public_access_security_groups_rdp_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 1521 (ORACLE DB DEFAULT) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 1521 (ORACLE DB DEFAULT)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 1521 (ORACLE DB DEFAULT).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "2124e22b-1000-4990-82a4-9ef4bf4ea361",
        "rule_id": "public_access_security_groups_oracle_db_default_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 2483 (ORACLE DB) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 2483 (ORACLE DB)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 2483 (ORACLE DB).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "11b51e70-bb0b-4ea5-a71e-bed7dfa12e32",
        "rule_id": "public_access_security_groups_oracle_db_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 2484 (ORACLE DB SSL) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 2484 (ORACLE DB SSL)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 2484 (ORACLE DB SSL).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "4c98936c-e553-4378-b580-90ba0935b77c",
        "rule_id": "public_access_security_groups_oracle_db_ssl_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 3306 (MYSQL) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 3306 (MYSQL)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 3306 (MYSQL).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "9e50ece1-174e-4652-b255-f64a7ba82bbd",
        "rule_id": "public_access_security_groups_mysql_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 5432 (POSTGRES) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 5432 (POSTGRES)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 5432 (POSTGRES).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "7fa738dc-694d-45cd-b5d5-bdfa7cc844e0",
        "rule_id": "public_access_security_groups_postgres_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 6379 (REDIS) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 6379 (REDIS)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 6379 (REDIS).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "2c0bed4c-06bd-4e87-9e88-777731f322bb",
        "rule_id": "public_access_security_groups_redis_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 27017 (MONGODB) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 27017 (MONGODB)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 27017 (MONGODB).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "35f4e403-8a85-4bd1-b0ad-c1eeae746b49",
        "rule_id": "public_access_security_groups_mongodb_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 27018 (MONGODB SHARD CLUSTER) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 27018 (MONGODB SHARD CLUSTER)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 27018 (MONGODB SHARD CLUSTER).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "0ec205a6-a94d-4440-9a1e-e9c361629d77",
        "rule_id": "public_access_security_groups_mongodb_shard_cluster_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 7199 (CASSANDRA) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 7199 (CASSANDRA)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 7199 (CASSANDRA).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "f3bcc0d0-4c1b-403f-8c41-585540eb5cc5",
        "rule_id": "public_access_security_groups_cassandra_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9160 (CASSANDRA THRIFT) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9160 (CASSANDRA THRIFT)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9160 (CASSANDRA THRIFT).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "519ad81b-fb22-4fd8-8bed-c3dec5113b6b",
        "rule_id": "public_access_security_groups_cassandra_thrift_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 8888 (CASSANDRA MNG) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 8888 (CASSANDRA MNG)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 8888 (CASSANDRA MNG).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "5ae02f23-5247-4f8d-aa56-9bdb90b80a17",
        "rule_id": "public_access_security_groups_cassandra_mng_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 11211 (MEMCACHED) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 11211 (MEMCACHED)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 11211 (MEMCACHED).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "40839b64-ddd9-45d2-9386-ec492f96caed",
        "rule_id": "public_access_security_groups_memcached_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9300 (ELASTICSEARCH NODES) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9300 (ELASTICSEARCH NODES)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9300 (ELASTICSEARCH NODES).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "0193ebc8-f6ff-4e18-8413-a8701799678f",
        "rule_id": "public_access_security_groups_elasticsearch_nodes_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9200 (ELASTICSEARCH) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9200 (ELASTICSEARCH)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9200 (ELASTICSEARCH).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "ef11d857-ef8f-4bbe-8a0a-1b8941a014c1",
        "rule_id": "public_access_security_groups_elasticsearch_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 5601 (KIBANA) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 5601 (KIBANA)",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 5601 (KIBANA).",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "dc6459cf-1d64-4589-a023-899e251e280f",
        "rule_id": "public_access_security_groups_kibana_port_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the Redshift databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed from the Internet are highlighted.",
        "rule_name": "Ensure Redshift database is not publicly accessible",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "619d2474-66ac-44f7-a306-b5272cb4d4d5",
        "rule_id": "public_access_db_redshift_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the Redshift databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "rule_name": "Ensure Redshift database is not accessible indirectly via a publicly accessible resource",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Many organizations would like to protect their databases by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access a database. The reason behind this is to avoid having \u201ctwo hops\u201d into the database from the Internet.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "c7cdd145-faba-4f4a-9411-18c9177f0202",
        "rule_id": "indirect_public_access_db_redshift",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the RDS databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "rule_name": "Ensure RDS database is not accessible indirectly via a publicly accessible resource",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Many organizations would like to protect their databases by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access a database. The reason behind this is to avoid having \u201ctwo hops\u201d into the database from the Internet.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "0ffc78d9-4aa6-4006-979a-3ad2cf754fb0",
        "rule_id": "indirect_public_access_db_rds",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the RDS databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed from the Internet are highlighted.",
        "rule_name": "Ensure RDS database is not publicly accessible",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "4fd2a4f7-0590-41c0-b268-a06c9ff52779",
        "rule_id": "public_access_db_rds_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will determine if a resource has been configured to use EC2 Classic mode by verifying that the account supports it and the resource does not have a specific VPC set.",
        "rule_name": "Ensure EC2-Classic mode is not used",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "AWS accounts created until late 2013 supported EC2 Classic mode. This allowed for an easier configuration of some resources, while having less control over their VPC placement and security. It is not a good practice to continue using EC2 Classic mode.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "9baf4dc1-faa9-4b05-9939-40b71630925c",
        "rule_id": "disallow_ec2_classic_mode_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all resources configured to determine if any of them is set to use the default VPC. This includes resources that may have no VPC ID set and would be assigned the default VPC upon creation.",
        "rule_name": "Ensure the default VPC is not used",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Many AWS resources can be configured to reside in a specific VPC. If parameters are left to their default values, AWS may place the resource in the default VPC. This isn\u2019t a good practice, as it\u2019s best to specifically configure such parameters. Cloudrail will determine if resources are placed in the default VPC.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "65aa9021-8dd9-4730-9be3-84a7f94e6acc",
        "rule_id": "disallow_default_vpc",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the Elasticsearch domains configured in your environment. For each domain it will review if it is set to be publicly accessible.",
        "rule_name": "Ensure Elasticsearch Domain is not publicly accessible",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Cloudrail will review all of the Elasticsearch domains configured in your environment. For each domain it will review if it is set to be publicly accessible.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "56bfc078-7d05-4d9f-aa9e-e48c2ead6d1a",
        "rule_id": "public_access_elasticsearch_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the ES domains configured in your environment. For each database, it will review the security groups in use (whether VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the ES domain can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only domains which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "rule_name": "Ensure Elasticsearch Domain is not accessible indirectly via a publicly accessible resource",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Many organizations would like to protect their Elasticsearch domains by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access an ES domain. The reason behind this is to avoid having \u201ctwo hops\u201d into the ES domain from the Internet.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "681663c8-090c-49d4-9d1d-def9ae64d8d3",
        "rule_id": "indirect_public_access_elastic_search_rule",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the routing tables configured in your environment that have routes pointing to a VPC peer. It will then cross reference these routing tables with the subnets they are attached to, and with the resources they are used with, to determine they are used at all. For those routing tables that are used, Cloudrail will review the routes defined and cross-reference them with the VPC\u2019s CIDR block. If a route is found to exactly match the CIDR block, it will be highlighted by Cloudrail. By doing this context-based analysis, Cloudrail ensures that only routing tables who pose a true security risk are highlighted. NOTE: If a VPC Peering Connection is created through Terraform, to a VPC in a different account, Cloudrail will only be able to evaluate this rule after the connection has been established. This is due to the lack of knowledge of the peer VPC\u2019s CIDR block.",
        "rule_name": "Ensure used routing tables for VPC peering are \"least access\"",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "It's important to ensure that only specific networks are exposed through a VPC peering connection. Exposing an entire VPC through the connection may create the risk of exposing resources that were not intended.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "96dcea4e-64f4-47be-bb40-117c31aee049",
        "rule_id": "vpc_peering_least_access",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review the Elasticsearch domains being created in your environment. If a domain is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule is not context-aware, but will only flag a violation for resources that are not yet created.",
        "rule_name": "Ensure Elasticsearch Domains being created are set to be encrypted at rest",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Elasticsearch Domains should be encrypted whenever possible. Because it is easy to do upon resource creation, Cloudrail will flag a violation if a domain that is set to be created does not have encryption at rest turn on.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "732564f6-e335-40bb-87f0-3d7f46771956",
        "rule_id": "non_car_es_domain_encrypt_at_rest_creating",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review all of the EKS clusters configured in your environment. For each cluster, it will review the whether the API has a public IP and whether it is Internet-accessible on the subnets it\u2019s attached to. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only EKS clusters whose API can truly be accessed from the Internet are highlighted.",
        "rule_name": "Ensure EKS API is not publicly accessible",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "The EKS cluster's management API is a sensitive endpoint to expose publicly. Cloudrail will determine if such an exposure occurred.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "e20736be-9442-4de9-911c-4e8f0366bdba",
        "rule_id": "public_access_eks_api",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review the load balancers and target groups configured in your environment. If a target group is in use and is communicating with its targets in HTTP, Cloudrail will flag a violation.",
        "rule_name": "Ensure target groups are not using HTTP",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Best practices encourage encryption of communication between each two entities in your environment. This includes between a load balancer and the servers it is connected to.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "2d14726a-0375-4d54-b098-86b1631d975d",
        "rule_id": "non_car_alb_target_group_no_http",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review the S3 buckets being created in your environment. For each bucket, it will analyze its ACLs and bucket policies. If an S3 bucket is allowing public access through an ACL (whether canned or user provided), or it is allowing cross-account access through ACL, or is allowing either of the above through a bucket policy, Cloudrail will highlight it as a violation.",
        "rule_name": "Ensure S3 buckets are not made widely accessible through ACLs and bucket policies",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Generally, all S3 buckets, with specific exceptions, should not be publicly accessible. Access should be permitted only to specific entities and services, through tightly controlled policies.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b4d68a3c-2884-49f7-96e9-26ef0f953e29",
        "rule_id": "s3_acl_disallow_public_and_cross_account",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review the CloudFront distributions in your environment. If a CloudFront distribution is using an insecure protocol version (pre TLSv1.2_2019), Cloudrail will highlight it as a violation. This rule is not context-aware.",
        "rule_name": "Ensure CloudFront protocol version is a good one",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "The CloudFront protocol used is an important piece of securing the content flowing between your users and your infrastructure. It's important to use protocol versions that are considered more secure.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "364a4822-297f-4cd0-9177-4b7500e5f89a",
        "rule_id": "non_car_cloudfront_protocol_version",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review the IAM settings in your environment, and specifically the users being created. If a user is assigned a permission policy directly, Cloudrail will highlight it as a violation.",
        "rule_name": "Ensure IAM permissions are not given directly to users",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Best practices dictate that IAM permissions are given to roles, groups, etc., and never directly to users.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "d6c08747-05a4-498f-97de-65fbaf2f47a6",
        "rule_id": "non_car_iam_no_permissions_directly_to_user",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Look for CloudFront Distributions, then look inside default_cache_behavior block and ordered_cache_behavior block (can exist several ordered blocks) in order to check the values of: viewer_protocol_policy to ensure it is set to either \u201chttps-only\u201d or \u201credirect-to-https\u201d",
        "rule_name": "Ensure CloudFront Distribution being created are set to encrypt in transit",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Cloudrail will review the CloudFront Distributions in your environment. If it is not using HTTPS, Cloudrail will highlight it as a violation. This rule is not context-aware.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "1ccabb9a-52cb-4bbf-89a8-732d2b3c1e67",
        "rule_id": "non_car_cloudfront_distribution_encrypt_in_transit",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will review configurations of EC2 instances, launch configurations, and launch templates used in the environment. If they are set to allow IMDSv1, Cloudrail will highlight it as a violation. This rule is not context-aware.",
        "rule_name": "Ensure IMDSv2 is used and IMDSv1 is disabled",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There have been hacks in the past caused by the use of IMDSv1. It is now best practice to disable IMDSv1 and use IMDSv2. It\u2019s important to test the disablement of IMDSv1 carefully, as it may cause issues in an application\u2019s execution (if it using an old SDK, for example).",
        "issue_items": [
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "64386b48-d6ba-46ad-8ff7-f568681f15c6"
                },
                "evidence": "The EC2 ```aws_instance.priv_ins``` is allowing IMDSv1",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "714d9d6a-2b9b-46dc-b060-4fa8a3f76278"
                }
            },
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.pub_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.pub_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.pub_ins",
                        "start_line": 99,
                        "block_text": "resource \"aws_instance\" \"pub_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.public_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n\n}\n",
                        "module_metadata": null,
                        "id": "aeac3c10-04ec-4f5b-ae2a-e2b9ca1a8aac",
                        "end_line": 105,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.pub_ins.id",
                    "type": "Ec2 Instance",
                    "id": "4d65c360-01e8-474a-9b18-7d1a9d5c964e"
                },
                "evidence": "The EC2 ```aws_instance.pub_ins``` is allowing IMDSv1",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.pub_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.pub_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.pub_ins",
                        "start_line": 99,
                        "block_text": "resource \"aws_instance\" \"pub_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.public_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n\n}\n",
                        "module_metadata": null,
                        "id": "aeac3c10-04ec-4f5b-ae2a-e2b9ca1a8aac",
                        "end_line": 105,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.pub_ins.id",
                    "type": "Ec2 Instance",
                    "id": "9609b9a1-6070-4b8e-a22a-065026734029"
                }
            }
        ],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "d1210961-7f3f-41cc-a77d-456c550e98a8",
        "rule_id": "non_car_ensure_imdsv2",
        "status": "failed"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all Athena workgroups within your AWS account and Terraform plan. If the workgroup does not enforce the use of the workgroup config, a violation will be highlighted. If it does, and the config doesn\u2019t have encryption enabled, a violation will be highlighted as well.",
        "rule_name": "Ensure Athena Workgroup query results are set to be encrypted at rest",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Cloudrail will review the Athena Workgroups in your environment. If a Workgroup is not set to encrypt at rest the query results, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "9bf24720-2b39-4288-9b52-e1b4790dbb71",
        "rule_id": "non_car_athena_workgroup_query_results_encrypt_at_rest",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail will identify all buckets and the regions where they exist. For each region, it will check that there is a VPC Endpoint for S3 created and which VPC it's associated to, it will then check all VPCs to identify which ones are not associated to a VPC Endpoint for S3 and will flag it as non-compliant, also if there were no VPC Endpoints in the region but there was a bucket it will flag all VPCs as non-compliant. It will check that there is at least one resource using an ENI to avoid alerting on unused VPCs.",
        "rule_name": "Ensure VPC Endpoint for S3 is enabled in all VPCs",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid the need of sending data destined to S3 through the internet. Cloudrail will identify misconfigurations by checking if VPC Endpoint Gateways are in use or not, by reviewing that an endpoint exists in the VPC. This rule first checks that there is at least one network interface in the VPC to avoid alerting on unused VPCs.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b510fa42-fb96-4e3b-ae70-38f0576ca75d",
        "rule_id": "vpc_endpoint_s3_exposure",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_eks_cluster resource's enabled_cluster_log_types field. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure Amazon EKS control plane logging enabled for all log types",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Logging all control plane activity in EKS is important in order to determine potential bad activity, or to look back to if any issue occurs.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "eaf05d17-e1cf-4d50-9b79-98988b974adb",
        "rule_id": "CKV_AWS_37",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the IAM policy looking for statements with all actions included. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM policies that allow full \"*\" administrative privileges are not created",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Policies should have specific permissions in order to follow the \"least privilege\" concept. Therefore, having a policy with all permissions included is in violation of best practices.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "48cafbfd-4e70-48c2-b85f-8ee30d0bb3a2",
        "rule_id": "CKV_AWS_1",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the EBS volumes' encryption settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure all data stored in the EBS is securely encrypted",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. EBS volumes may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "268ba2c7-ccfd-4bb9-b930-039c2e9572f4",
        "rule_id": "CKV_AWS_3",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_kms_key's enable_key_rotation. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure rotation for customer created CMKs is enabled",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption keys should be rotated regularly to decrease the exposure in case a key is somehow discovered. Customer created CMKs should have the keys automatically rotated.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b25235fd-6d7e-4422-9b83-81e6b0244ba7",
        "rule_id": "CKV_AWS_7",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_launch_configuration's and aws_instance's EBS encryption settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure all data stored in the Launch configuration EBS is securely encrypted",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. EBS volumes may store sensitive data, and therefore should be encrypted.",
        "issue_items": [
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.pub_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.pub_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.pub_ins",
                        "start_line": 99,
                        "block_text": "resource \"aws_instance\" \"pub_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.public_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n\n}\n",
                        "module_metadata": null,
                        "id": "aeac3c10-04ec-4f5b-ae2a-e2b9ca1a8aac",
                        "end_line": 105,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.pub_ins.id",
                    "type": "Ec2 Instance",
                    "id": "271dadc8-d86d-4b83-9054-db68263b52ae"
                },
                "evidence": "This rule evaluated ```aws_instance.pub_ins``` only, it is not a context-aware rule.",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.pub_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.pub_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.pub_ins",
                        "start_line": 99,
                        "block_text": "resource \"aws_instance\" \"pub_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.public_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n\n}\n",
                        "module_metadata": null,
                        "id": "aeac3c10-04ec-4f5b-ae2a-e2b9ca1a8aac",
                        "end_line": 105,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.pub_ins.id",
                    "type": "Ec2 Instance",
                    "id": "500ba1af-fbd5-4f07-8049-11f15916f3f3"
                }
            },
            {
                "exposed_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "87a0e633-c24d-4c1c-a174-8b70154395db"
                },
                "evidence": "This rule evaluated ```aws_instance.priv_ins``` only, it is not a context-aware rule.",
                "violating_entity": {
                    "managed_by_tf": true,
                    "is_pseudo": false,
                    "created_at": "2020-11-23T21:53:54.516774",
                    "tf_address": "aws_instance.priv_ins",
                    "cloud_arn": null,
                    "name": "aws_instance.priv_ins.id",
                    "tf_resource_metadata": {
                        "address": "aws_instance.priv_ins",
                        "start_line": 107,
                        "block_text": "resource \"aws_instance\" \"priv_ins\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  subnet_id = module.vpc.private_subnets[0]\n  iam_instance_profile = aws_iam_instance_profile.test_profile.name\n}",
                        "module_metadata": null,
                        "id": "334c0ef4-5cf9-47cd-9f31-39c64a8d0127",
                        "end_line": 112,
                        "file_name": "main.tf"
                    },
                    "cloud_id": "aws_instance.priv_ins.id",
                    "type": "Ec2 Instance",
                    "id": "194a66df-6892-4dfd-94e1-464d711b71ee"
                }
            }
        ],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "50611a12-eaac-4f7b-92ae-e168f4fe3fd1",
        "rule_id": "CKV_AWS_8",
        "status": "failed"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy expires passwords within 90 days or less",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords expire in a timely manner.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "e8edc77a-9747-40e0-952f-a30e568414f8",
        "rule_id": "CKV_AWS_9",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy requires minimum length of 14 or greater",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are sufficiently complex.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "754ee5b6-f712-4539-b263-90bd03bab65e",
        "rule_id": "CKV_AWS_10",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy requires at least one lowercase letter",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are sufficiently complex.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "cd4abe26-12ef-43c0-9a2d-ab5618318c2f",
        "rule_id": "CKV_AWS_11",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy requires at least one number",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are sufficiently complex.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b48e199b-172d-429b-b91a-c3f97e3a8c6f",
        "rule_id": "CKV_AWS_12",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy prevents password reuse",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are not reused.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "76e7f167-73ef-4df6-803a-58b5b1b9fa97",
        "rule_id": "CKV_AWS_13",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy requires at least one symbol",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are sufficiently complex.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "2d788c42-1b73-4a80-a91d-343291edc184",
        "rule_id": "CKV_AWS_14",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_iam_account_password_policy resource's settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure IAM password policy requires at least one uppercase letter",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "There are several best practices around password policies. One of them is ensuring passwords are sufficiently complex.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "afa052a4-d07a-4e31-83ae-c4f54b54fb2b",
        "rule_id": "CKV_AWS_15",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_s3_bucket's server-side-encryption settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure all data stored in the S3 bucket is securely encrypted at rest",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. S3 buckets may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "4c1f12d9-0cf9-48e0-a32b-02f5fc1d812c",
        "rule_id": "CKV_AWS_19",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to ensure a description is present in aws_security_group, aws_security_group_rule, aws_db_security_group, aws_elasticache_security_group, aws_redshift_security_group. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure every security groups rule has a description",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "It is advisable to document every firewall rule's purpose. Some regulations even require it. Security groups act as firewalls and so should have a description included.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "137f71ef-299d-4ba0-ad6f-3cc0ceb90746",
        "rule_id": "CKV_AWS_23",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_sns_topic's server-side-encryption settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure all data stored in the SNS topic is encrypted",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. SNS topics may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "d69940db-f741-4610-9c0f-86b4bf5f1a9c",
        "rule_id": "CKV_AWS_26",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_sqs_queue's server-side-encryption settings. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure all data stored in the SQS queue is encrypted",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. SQS queues may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "e6f6ca58-a061-44e0-a235-9e1d4a5c78ca",
        "rule_id": "CKV_AWS_27",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_dynamodb_table's point_in_time_recovery setting. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure DynamoDB Point-in-Time recovery (backup) is enabled",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "It is important to have automatic backups of crucial data. In DynamoDB has a capability to do so through its Point-in-Time feature.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "0286f0d2-5598-4d4d-a39f-31bbd7c0882b",
        "rule_id": "CKV_AWS_28",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the AWS provider configuration in your Terraform code.",
        "rule_name": "Ensure no hard coded AWS access key and and secret key exists in provider",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"provider\" section of the Terraform code.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "d094d4fc-112e-42fe-96c8-e137414ac89d",
        "rule_id": "CKV_AWS_41",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_kinesis_stream's encryption_type setting. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure Kinesis Stream is securely encrypted",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. Kinesis Streams may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "b9737a3d-10e3-4dcc-b3a4-bc72b45f310f",
        "rule_id": "CKV_AWS_43",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_lambda_function's environment and look for AWS keys. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure no hard coded AWS access key and secret key exists in lambda environment",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"environment\" section of a lambda function.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "796e837e-4480-4c2a-bb64-7bb8e89a24a8",
        "rule_id": "CKV_AWS_45",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_instance's user_data and look for AWS keys. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure no hard coded AWS access key and secret key exists in EC2 user data",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"user data\" section of an EC2 instsance.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "2b2ac6d2-d56e-4052-9580-d50222c31fb5",
        "rule_id": "CKV_AWS_46",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the SQS policy looking for statements with all actions included. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure SQS policy does not allow ALL (*) actions.",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Policies should have specific permissions in order to follow the \"least privilege\" concept. Therefore, having an SQS policy with all permissions allowed for a principal is in violation of best practices.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "de6cb75f-f40f-4141-88a7-025336cdb78c",
        "rule_id": "CKV_AWS_72",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_elasticsearch_domain's domain_endpoint_options setting. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure Elasticsearch Domain enforces HTTPS",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption in transit is often part of the security policy of organizations. Enforcing the use of HTTPS on all data transport is usually easy to do, and important to protect sensitive data.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "f9b99c31-3992-4aca-913b-fd02b9a2418e",
        "rule_id": "CKV_AWS_83",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_docdb_cluster_parameter_group's TLS setting. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure DocDB TLS is not disabled",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption in transit is often part of the security policy of organizations. Enforcing the use of TLS on all data transport is usually easy to do, and important to protect sensitive data.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "58346605-29e1-4f2c-8733-d4761783e280",
        "rule_id": "CKV_AWS_90",
        "status": "success"
    },
    {
        "policy_name": null,
        "rule_logic": "Cloudrail uses checkov to review the aws_glue_data_catalog_encryption_settings setting. This rule will only review Terraform content and not any resources in your cloud environment. This rule will eventually be replaced with a context-aware rule to increase accuracy, as well as expand its scope to your active cloud environment.",
        "rule_name": "Ensure Glue Data Catalog Encryption is enabled",
        "enforcement_mode": "advise",
        "created_at": "2020-11-23 21:53:54Z",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. Glue Data Catalogs may store sensitive data, and therefore should be encrypted. It is possible for a client not to encrypt the data, and therefore a server-side override is needed.",
        "issue_items": [],
        "policy_id": null,
        "job_id": "e8ebf7b5-71cd-4660-85a6-7dcffbe6eadc",
        "id": "d594b980-d86c-4ffa-9d6b-413e9dd4ff9c",
        "rule_id": "CKV_AWS_94",
        "status": "success"
    }
]