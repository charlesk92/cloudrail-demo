# This is a sample gitlab CI configuration showing how to use Cloudrail
# to test Terraform content. It will actually go and test all the cases included in this repo.

# Based on example: https://gitlab.com/gitlab-org/configure/examples/gitlab-terraform-aws/-/blob/master/.gitlab-ci.yml

image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
variables:
  # Picking some TF folder to test
  TEST_ROOT: ${CI_PROJECT_DIR}/test/aws/terraform/ec2_role_share_rule/public_and_private_ec2_same_role
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}

before_script:
  - cd ${TEST_ROOT}

stages:
  - init_and_plan
  - cloudrail

init_and_plan:
  stage: init_and_plan
  script:
    - find . -name "main.tf" | sed 's/\/main.tf//' | grep -v ".terraform" | while read case; do PRECWD=$PWD ; cd $case ; echo $PWD; terraform init ; cd $PRECWD ; done
    - find . -name "main.tf" | sed 's/\/main.tf//' | grep -v ".terraform" | while read case; do PRECWD=$PWD ; cd $case ; echo $PWD; terraform plan -out=plan.out ; cd $PRECWD ; done
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - ./**/plan.out

cloudrail:
  stage: cloudrail
  script:
    - pip3 install cloudrail --extra-index-url https://indeni.jfrog.io/indeni/api/pypi/cloudrail-cli-pypi/simple
    - find . -name "main.tf" | sed 's/\/main.tf//' | grep -v ".terraform" | while read case; do PRECWD=$PWD ; cd $case ; cloudrail run --tf-plan plan.out --directory . --api-key ${CLOUDRAIL_API_KEY} ; cd $PRECWD ; done

#    reports:
#      junit: plan.out



